@{ Layout = "~/Views/Shared/_LayoutWindow.cshtml"; ViewData["Title"] = "Client Retainer"; }

@model Commsights.Data.Models.Membership

<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Client Retainer</h3>
            </div>
            <div class="card-body">
                <form asp-action="SaveCustomer" asp-controller="Membership">
                    @Html.HiddenFor(Model => Model.ID)
                    <div class="row">
                        <div class='col-md-8'>
                        </div>
                        <div class='col-md-1'>
                            <button style="width:100%;" type="submit" title="Save" class="btn btn-primary">
                                <span class="fas fa-save"></span>
                            </button>
                        </div>
                        <div class='col-md-1'>
                            <a asp-route-ID="@Model.ID" asp-action="CustomerFiles" asp-controller="Membership" title="Files" style="width:100%;" class="btn btn-success">
                                <span class="fas fa-paperclip"></span>
                            </a>
                        </div>
                        <div class='col-md-1'>
                            <a asp-action="CustomerPlus" asp-controller="Membership" title="New page" style="width:100%;" class="btn btn-success">
                                <span class="fas fa-plus"></span>
                            </a>
                        </div>
                        <div class='col-md-1'>
                            <a asp-action="CustomerCancel" asp-controller="Membership" title="Customer category" style="width:100%;" class="btn btn-info">
                                <span class="fas fa-arrow-left"></span>
                            </a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class='form-group'>
                                <label for='Account'>Customer</label>
                                @(Html.TextBoxFor(Model => Model.Account, new { placeholder = "Customer", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='FullName'>Full name</label>
                                @(Html.TextBoxFor(Model => Model.FullName, new { placeholder = "Full name", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='ShortName'>Short name</label>
                                @(Html.TextBoxFor(Model => Model.ShortName, new { placeholder = "Short name", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='EnglishName'>English name</label>
                                @(Html.TextBoxFor(Model => Model.EnglishName, new { placeholder = "English name", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='Phone'>Phone</label>
                                @(Html.TextBoxFor(Model => Model.Phone, new { placeholder = "Phone", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='Address'>Address</label>
                                @(Html.TextBoxFor(Model => Model.Address, new { placeholder = "Address", @class = "form-control" }))
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class='form-group'>
                                <label for='Phone'>Category</label>
                                @(Html.Kendo().DropDownListFor(Model => Model.ParentID)
                                   .DataValueField("ID")
                                   .DataTextField("CodeName")
                                   .HtmlAttributes(new {@class = "form-control" })
                                    .Filter(FilterType.StartsWith)
                                   .DataSource(dataSource => dataSource.Ajax().Read(t => t.Action("GetMembershipTypeToList", "Config")))
                                    )
                            </div>
                            <div class='form-group'>
                                <label for='DateBegin'>Date begin</label>
                                @(Html.TextBoxFor(Model => Model.DateBegin, "{0:MM/dd/yyyy}", new { placeholder = "Date begin (Month/Day/Year - MM/dd/yyyy)", @class = "form-control", style = "text-align:right;" }))
                            </div>
                            <div class='form-group'>
                                <label for='DateEnd'>Date end</label>
                                @(Html.TextBoxFor(Model => Model.DateEnd, "{0:MM/dd/yyyy}", new { placeholder = "Date end (Month/Day/Year - MM/dd/yyyy)", @class = "form-control", style = "text-align:right;" }))
                            </div>
                            <div class='form-group'>
                                <label for='Email'>Email</label>
                                @(Html.TextBoxFor(Model => Model.Email, new { placeholder = "Email", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <label for='Password'>Password</label>
                                @(Html.TextBoxFor(Model => Model.Password, new { placeholder = "Password", @type= "password", @class = "form-control" }))
                            </div>
                            <div class='form-group'>
                                <table>
                                    <tr>
                                        <td style="width:70%;" valign="top">
                                            @(Html.Kendo().Upload()
                              .Name("Upload")
                              .HtmlAttributes(new { @class = "form-control" })
                                )
                                        </td>
                                        <td style="width:30%;" valign="top">
                                            <img src="@Url.Content(Commsights.Data.Helpers.AppGlobal.Domain+Commsights.Data.Helpers.AppGlobal.URLImagesCustomer + "/" + Model.Avatar)" alt="@Url.Content(Model.Avatar)" class="img-thumbnail" />
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-1">
                        <div class="col-md-12" style="width:100%;">
                            @Html.TextAreaFor(Model => Model.Note)

                            <script src="/ckeditor/ckeditor.js"></script>
                            <script src="/ckeditor/adapters/jquery.js"></script>
                            <script>
                                CKEDITOR.replace("Note", {
                                    on: {
                                        'instanceReady': function (evt) {
                                            evt.editor.resize("100%", "600");
                                        }
                                    }
                                });
                            </script>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Industry</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferIndustry")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Industry.TextName).EditorTemplateName("Config_Industry").Title("Industry").Width(300);
    columns.Bound(t => t.Active).Title("Default").Width(300);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.Industry).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEndIndustry"); })
.Read(t => t.Action("GetDataTransferIndustryByMembershipIDAndIndustryToList", "MembershipPermission").Data("filterMembershipPermissionIndustry"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateDataTransferIndustry", "MembershipPermission").Data("filterMembershipPermissionIndustry"))
.Update(t => t.Action("UpdateDataTransferIndustry", "MembershipPermission"))
)
)
            </div>
        </div>
        <hr />
        <div class="row">
            <div class='col-sm-2'> 
                <b>Industry apply all</b>
            </div>
            <div class='col-sm-4'>
                @(Html.Kendo().DropDownList()
                     .Name("Industry")
                     .DataValueField("IndustryID")
                     .DataTextField("IndustryName")
                    .HtmlAttributes(new { @class = "form-control" })
                      .Events(e => e.DataBound("onIndustryDataBound"))
                       .Filter(FilterType.StartsWith)
                     .DataSource(dataSource => dataSource.Ajax().Read(t => t.Action("GetDataTransferIndustryByMembershipIDAndIndustryToList", "MembershipPermission").Data("filterMembershipPermissionIndustry")))
                            )
            </div>
            <div class='col-sm-1'>
                <button style="width:100%;" title="Search" class="btn btn-success" onclick="onSearchIndustry()">
                    <span class="fas fa-search"></span>
                </button>
            </div>
        </div>
        <hr />
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Email</h3>
            </div>
            <div class="card-body">

                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferContact")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.ReportType.TextName).EditorTemplateName("Config_ReportType").Title("Report").Width(200);
    columns.Bound(t => t.Email).Title("Email").Width(200);
    columns.Bound(t => t.FullName).Title("Contact").Width(200);
    columns.Bound(t => t.Phone).Title("Phone").Width(200);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.FullName); search.Field(f => f.Email); search.Field(f => f.Phone); })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.ReportType).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEndContact"); })
.Read(t => t.Action("GetDataTransferContactByMembershipIDAndIndustryIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateDataTransferContact", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("UpdateDataTransferContact", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Segment and Product</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferProduct")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Segment.TextName).EditorTemplateName("Config_Segment").Title("Segment").Width(300);
    columns.Bound(t => t.ProductName).Title("Product").Width(300);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.Segment).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEndProduct"); })
.Read(t => t.Action("GetDataTransferSegmentByMembershipIDAndIndustryIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateDataTransferSegmentProduct", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("UpdateDataTransferSegmentProduct", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Competitor - Partner - Branch</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferCompetitor")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Template(@"<a onclick='javascript:OpenWindowByURL(""/MembershipPermission/Product/#=ID#"");' class='btn btn-success' style='color:white;'><i class='fas fa-list-ul'></i></a>").Title("Product").Width(70).HtmlAttributes(new { style = "text-align:center;" });
    columns.Bound(t => t.Company.TextName).EditorTemplateName("Membership_Company").Title("Competitor - Partner - Branch").Width(150);
    columns.Bound(t => t.Segment.TextName).EditorTemplateName("Config_Segment").Title("Segment").Width(150);
    columns.Bound(t => t.SortOrder).Title("Sort").Width(200);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.Company).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
    model.Field(t => t.Industry).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
    model.Field(t => t.Segment).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEndCompetitor"); })
.Read(t => t.Action("GetDataTransferCompanyByMembershipIDAndIndustryIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateDataTransferCompetitor", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("UpdateDataTransferCompetitor", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Keyword Positive</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.Models.MembershipPermission>()
.Name("MembershipPermissionKeywordPositive")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.ProductName).Title("Positive").Width(300);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.ProductName); })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
})
.Events(t => { t.RequestEnd("onGridRequestEndKeywordPositive"); })
.Read(t => t.Action("GetByMembershipIDAndIndustryIDAndKeywordPositiveToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateKeywordPositive", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("Update", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Keyword Negative</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.Models.MembershipPermission>()
.Name("MembershipPermissionKeywordNegative")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.ProductName).Title("Negative").Width(300);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.ProductName); })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
})
.Events(t => { t.RequestEnd("onGridRequestEndKeywordNegative"); })
.Read(t => t.Action("GetByMembershipIDAndIndustryIDAndKeywordNegativeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateKeywordNegative", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("Update", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Daily report section</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-2'>
                        <button type="button" class="btn btn-primary" onclick="onInitializationDailyReportSection()">
                            <span class="fas fa-sync-alt"></span>
                        </button>
                    </div>
                </div>
                <br />
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferDailyReportSection")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); }).Width(150);
    columns.Bound(t => t.DailyReportSectionName).Title("Daily report section").Width(200);
    columns.Bound(t => t.Language.TextName).EditorTemplateName("Config_Language").Title("Language").Width(200);
    columns.Bound(t => t.Active).Title("Select").Width(100);
    columns.Bound(t => t.Hour).Title("01").Width(200);
    columns.Bound(t => t.Minute).Title("02").Width(200);
    columns.Bound(t => t.Second).Title("03").Width(200);
})
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid", @style = "height:300px;" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.DailyReportSectionName).Editable(false);
                model.Field(t => t.Language).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEndDailyReportSection"); })
.Read(t => t.Action("GetDataTransferDailyReportSectionByMembershipIDAndIndustryIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("UpdateDataTransferDailyReportSection", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Daily report column</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-2'>
                        <button type="button" class="btn btn-primary" onclick="onInitializationDailyReportColumn()">
                            <span class="fas fa-sync-alt"></span>
                        </button>
                    </div>
                </div>
                <br />
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransferDailyReportColumn")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Active).Title("Select").Width(100);
    columns.Bound(t => t.SortOrder).Title("Sort").Width(200);
    columns.Bound(t => t.FullName).Title("Upload").Width(200);
    columns.Bound(t => t.Email).Title("English").Width(200);
    columns.Bound(t => t.Phone).Title("Vietnamese").Width(200);
})
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
})
.Events(t => { t.RequestEnd("onGridRequestEndDailyReportColumn"); })
.Read(t => t.Action("GetDataTransferDailyReportColumnByMembershipIDAndIndustryIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("UpdateDataTransferDailyReportSectionOrColumn", "MembershipPermission"))
)
)
            </div>
        </div>
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Channel</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-2'>
                        <button type="button" class="btn btn-primary" onclick="onInitializationChannel()">
                            <span class="fas fa-sync-alt"></span>
                        </button>
                    </div>
                </div>
                <br />
                @(Html.Kendo().Grid<Commsights.Data.Models.MembershipPermission>()
.Name("MembershipPermissionChannel")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Email).Title("Channel").Width(200);
    columns.Bound(t => t.Active).Title("Select").Width(100);
})
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.Email).Editable(false);
})
.Events(t => { t.RequestEnd("onGridRequestEndChannel"); })
.Read(t => t.Action("GetByMembershipIDAndIndustryIDAndChannelToList", "MembershipPermission").Data("filterMembershipPermissionByMembershipIDAndIndustryID"))
.Update(t => t.Action("Update", "MembershipPermission"))
)
)
            </div>
        </div>
    </div>
</div>
@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)

<script>
    //Indusstry DropDownList
    function onIndustryDataBound() {
        var control = $("#Industry").data("kendoDropDownList");
        var controlLength = control.dataSource.data().length;
        if (controlLength > 0) {
            control.select(0);
            onSearchIndustry();
        }
    }
    function onSearchIndustry() {
        BeginRequestHandler();
        $("#MembershipPermissionChannel").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionDataTransferContact").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionDataTransferDailyReportColumn").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionDataTransferDailyReportSection").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionDataTransferProduct").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionKeywordPositive").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionKeywordNegative").data("kendoGrid").dataSource.read();
        $("#MembershipPermissionDataTransferCompetitor").data("kendoGrid").dataSource.read();
        EndRequestHandler();
    }
    function onGridRequestEndIndustry(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferIndustry").data("kendoGrid").dataSource.read();
            $("#Industry").data("kendoDropDownList").dataSource.read();
        }
    }
    function filterMembershipPermissionIndustry(e) {
        var membershipIDValue = $("#ID").val();
        return { membershipID: membershipIDValue };
    }
    //Contact
    function onGridRequestEndContact(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferContact").data("kendoGrid").dataSource.read();
        }
    }

    function onGridRequestEndProduct(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferProduct").data("kendoGrid").dataSource.read();
        }
    }

    //DailyReportSection
    function onGridRequestEndDailyReportSection(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferDailyReportSection").data("kendoGrid").dataSource.read();
        }
    }
    function onInitializationDailyReportSection() {
        BeginRequestHandler();
        var membershipIDValue = $("#ID").val();
        var industryIDValue = $("#Industry").data("kendoDropDownList").value();
        $.ajax(
            {
                type: "POST",
                datatype: "JSON",
                url: '@Url.Action("InitializationDailyReportSectionByMembershipIDAndIndustryID", "MembershipPermission")',
                data: { membershipID: membershipIDValue, industryID: industryIDValue },
                success: function (result) {
                    EndRequestHandler();
                    $("#MembershipPermissionDataTransferDailyReportSection").data("kendoGrid").dataSource.read();
                    var messageType = result.split('-')[0];
                    var note = result.split('-')[1];
                    var notification = $("#Notification").data("kendoNotification");
                    notification.show(note, messageType);
                },
                error: function (jqXHR, exception) { },
                complete: function () { },
            });
    }
    //DailyReportColumn
    function onGridRequestEndDailyReportColumn(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferDailyReportColumn").data("kendoGrid").dataSource.read();
        }
    }

    function onInitializationDailyReportColumn() {
        BeginRequestHandler();
        var membershipIDValue = $("#ID").val();
        var industryIDValue = $("#Industry").data("kendoDropDownList").value();
        $.ajax(
            {
                type: "POST",
                datatype: "JSON",
                url: '@Url.Action("InitializationDailyReportColumnByMembershipIDAndIndustryID", "MembershipPermission")',
                data: { membershipID: membershipIDValue, industryID: industryIDValue },
                success: function (result) {
                    EndRequestHandler();
                    $("#MembershipPermissionDataTransferDailyReportColumn").data("kendoGrid").dataSource.read();
                    var messageType = result.split('-')[0];
                    var note = result.split('-')[1];
                    var notification = $("#Notification").data("kendoNotification");
                    notification.show(note, messageType);
                },
                error: function (jqXHR, exception) { },
                complete: function () { },
            });
    }
     //Channel
    function onGridRequestEndChannel(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionChannel").data("kendoGrid").dataSource.read();
        }
    }

    function onInitializationChannel() {
        BeginRequestHandler();
        var membershipIDValue = $("#ID").val();
        var industryIDValue = $("#Industry").data("kendoDropDownList").value();
        $.ajax(
            {
                type: "POST",
                datatype: "JSON",
                url: '@Url.Action("InitializationChannelByMembershipIDAndIndustryID", "MembershipPermission")',
                data: { membershipID: membershipIDValue, industryID: industryIDValue },
                success: function (result) {
                    EndRequestHandler();
                    $("#MembershipPermissionChannel").data("kendoGrid").dataSource.read();
                    var messageType = result.split('-')[0];
                    var note = result.split('-')[1];
                    var notification = $("#Notification").data("kendoNotification");
                    notification.show(note, messageType);
                },
                error: function (jqXHR, exception) { },
                complete: function () { },
            });
    }
    //Competitor
    function onGridRequestEndCompetitor(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransferCompetitor").data("kendoGrid").dataSource.read();
        }
    }

    //Keyword Negative
    function onGridRequestEndKeywordNegative(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionKeywordNegative").data("kendoGrid").dataSource.read();
        }
    }

    //Keyword Positive
    function onGridRequestEndKeywordPositive(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionKeywordPositive").data("kendoGrid").dataSource.read();
        }
    }

    function filterMembershipPermissionByMembershipIDAndIndustryID(e) {
        var membershipIDValue = $("#ID").val();
        var industryIDValue = $("#Industry").data("kendoDropDownList").value();
        return { membershipID: membershipIDValue, industryID: industryIDValue };
    }

</script>
