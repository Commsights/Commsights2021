@{ Layout = "~/Views/Shared/_LayoutWindow.cshtml"; ViewData["Title"] = "Industry"; }

@model Commsights.Data.Models.MembershipPermission
@Html.HiddenFor(Model => Model.ID)
<div class="card card-primary card-outline">
    <div class="card-header">
        <h5 class="card-title m-0">Industry</h5>
    </div>
    <div class="card-body">
        <div class="row">
            @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.MembershipPermissionDataTransfer>()
.Name("MembershipPermissionDataTransfer")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Industry001.TextName).EditorTemplateName("MembershipPermission_Customer_Industry").EditorViewData(new { CustomerID = Model.MembershipID, ValueBind = "value: Industry001" }).Title("Customer").Width(300);
    columns.Bound(t => t.IndustryCompare001.TextName).EditorTemplateName("MembershipPermission_Compare_Industry").EditorViewData(new { CompareID = Model.CompanyID, ValueBind = "value: IndustryCompare001" }).Title("Compare").Width(300);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.Industry001).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplateIndustry());
    model.Field(t => t.IndustryCompare001).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplateIndustry());
})
.Events(t => { t.RequestEnd("onMembershipPermissionIndustryGridRequestEnd"); })
.Read(t => t.Action("GetDataTransferIndustryByParentIDAndCodeToList", "MembershipPermission").Data("filterMembershipPermissionIndustry"))
.Destroy(t => t.Action("Delete", "MembershipPermission"))
.Create(t => t.Action("CreateDataTransferIndustryByParentID", "MembershipPermission").Data("filterCreateDataTransferIndustryByParentID"))
.Update(t => t.Action("UpdateDataTransferIndustry001", "MembershipPermission"))
)
)

        </div>
    </div>
</div>

@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)

<script>
    function onMembershipPermissionIndustryGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#MembershipPermissionDataTransfer").data("kendoGrid").dataSource.read();
        }
    }
    function filterMembershipPermissionIndustry(e) {
        var parentIDValue = $("#ID").val();
        return { parentID: parentIDValue };
    }
    function filterCreateDataTransferIndustryByParentID(e) {
        var parentIDValue = $("#ID").val();
        return { parentID: parentIDValue };
    }
</script>
