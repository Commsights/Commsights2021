@{ ViewData["Title"] = "Google search"; }

@model Commsights.Data.Models.ProductSearch
@Html.HiddenFor(Model => Model.ID)
<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Data - Google search</h3>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.ProductDataTransfer>()
.Name("ProductDataTransfer")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.DatePublish).Title("Publish").Width(300);
    columns.Bound(t => t.ArticleType.TextName).EditorTemplateName("Config_ArticleType").Title("Article type").Width(200);
    columns.Bound(t => t.Company.TextName).EditorTemplateName("Membership_Company").Title("Company").Width(200);
    columns.Bound(t => t.AssessType.TextName).EditorTemplateName("Config_AssessType").Title("Assess").Width(200);
    columns.Bound(t => t.Title).Title("Title").Width(300);
    columns.Bound(t => t.URLCode).Title("URL").Width(300);
    columns.Bound(t => t.Author).Title("Author").Width(300);
    columns.Bound(t => t.Description).Title("Description").Width(300);
    columns.Bound(t => t.ContentMain).Title("Content").Width(300);

})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.Title); search.Field(f => f.URLCode); search.Field(f => f.Description); })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.ArticleType).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
    model.Field(t => t.Company).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
    model.Field(t => t.AssessType).DefaultValue(new Commsights.Data.DataTransferObject.ModelTemplate());
})
.Events(t => { t.RequestEnd("onGridRequestEnd"); })
.Read(t => t.Action("GetDataTransferByProductSearchIDToList", "Product").Data("filterProduct"))
.Destroy(t => t.Action("Delete", "Product"))
.Create(t => t.Action("CreateDataTransfer", "Product").Data("filterProductCreate"))
.Update(t => t.Action("UpdateDataTransfer", "Product"))
)
)
            </div>
        </div>
    </div>
</div>



@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)
<script>
    function onGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#ProductDataTransfer").data("kendoGrid").dataSource.read();
        }
    }
    function filterProduct(e) {
        var productSearchIDValue = $("#ID").val();
        return { productSearchID: productSearchIDValue };
    }
    function filterProductCreate(e) {
        var productSearchIDValue = $("#ID").val();
        return { productSearchID: productSearchIDValue };
    }
</script>
