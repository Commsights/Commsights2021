@{ Layout = "~/Views/Shared/_LayoutWindow.cshtml"; ViewData["Title"] = Model.Title; }

@model Commsights.Data.Models.Config
@Html.HiddenFor(Model => Model.ID)
@Html.HiddenFor(Model => Model.Note)
<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title"><a target="_blank" title="@Model.Title" href="@Model.URLFull" style="color:white; cursor:pointer;">@Model.Title</a></h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-md-11'>
                    </div>
                    <div class='col-md-1'>
                        <button type="button" class="btn btn-danger" onclick="onDelete()">
                            <span class="fas fa-trash-alt"></span>
                        </button>
                    </div>
                </div>
                @(Html.Kendo().Grid<Commsights.Data.Models.Config>()
.Name("Config")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" }); command.Destroy().Text("&nbsp;").IconClass("fas fa-trash-alt").HtmlAttributes(new { style = "font-size: 16px; color:#ffffff; background-color:#d73925; padding-left:16px; padding-top:6px; border-radius: 6px; width:50px;" }); }).Width(150);
    columns.Bound(t => t.Title).Title("Title").Width(200);
    columns.Bound(t => t.URLFull).Title("URLFull").Width(400);
})
.ToolBar(toolBar => toolBar.Create().Text("&nbsp;").IconClass("fas fa-plus").HtmlAttributes(new { style = "font-size: 16px; border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.Title); search.Field(f => f.URLFull);})
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
})
.Events(t => { t.RequestEnd("onGridRequestEnd"); })
.Read(t => t.Action("GetWebsiteByParentIDAndGroupNameAndCodeToList", "Config").Data("filterConfig"))
.Destroy(t => t.Action("Delete", "Config"))
.Create(t => t.Action("CreateWebiste", "Config").Data("filterConfig"))
.Update(t => t.Action("Update", "Config"))
)
)
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">URL</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-md-11'>
                    </div>
                    <div class='col-md-1'>
                        <button type="button" class="btn btn-primary" onclick="onSaveWebsiteScanItems()">
                            <span class="fas fa-save"></span>
                        </button>
                    </div>
                </div>
                @(Html.Kendo().Grid<Commsights.Data.Models.Config>()
.Name("ConfigURL")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 16px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" });  }).Width(150);
    columns.Select().Width(50);
    columns.Bound(t => t.Active).Title("Select").Width(100);
    columns.Bound(t => t.Title).Title("Title").Width(300);
    columns.Bound(t => t.URLFull).Title("URLFull").Width(1000);
})
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.Title); search.Field(f => f.URLFull);})
.Events(ev => ev.Change("onGridChange"))
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.Note);
})
.Events(t => { t.RequestEnd("onGridConfigURLRequestEnd"); })
.Read(t => t.Action("GetWebsiteScanByIDToList", "Config").Data("filterConfig"))
.Update(t => t.Action("CreateWebiste", "Config").Data("filterConfig"))
)
)
            </div>
        </div>
    </div>
</div>
@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)

<script>
    function onGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#Config").data("kendoGrid").dataSource.read();
        }
    }
    function onGridConfigURLRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#Config").data("kendoGrid").dataSource.read();
        }
    }
    function filterConfig(e) {
        var parentIDValue = $("#ID").val();
        return { parentID: parentIDValue };
    }
    function onDelete() {
        BeginRequestHandler();
        var parentIDValue = $("#ID").val();
            $.ajax({
                type: 'GET',
                url: "@Url.Action("DeleteByParentIDAndGroupNameAndCode", "Config")",
                data: {
                    parentID: parentIDValue
                },
                success: function () { }
            }).done(() => {
                $("#Config").data("kendoGrid").dataSource.read();
                EndRequestHandler();
            });
    }
    function onGridChange(arg) {
        $("#Note").val(this.selectedKeyNames().join(";"));
    }
    function onSaveWebsiteScanItems() {
        BeginRequestHandler();
        var listValue = $("#Note").val();
        var parentIDValue = $("#ID").val();
        $.post("/Config/SaveWebsiteScanItems", { parentID: parentIDValue, listValue: listValue }, function (result) {   
            $("#Config").data("kendoGrid").dataSource.read();
            EndRequestHandler();
        });
    }
</script>
