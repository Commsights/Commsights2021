@{ ViewData["Title"] = "Search"; }

@model Commsights.Data.Models.ProductSearch

@Html.HiddenFor(Model => Model.ID)
<input type="hidden" id="IDList">
<input type="hidden" id="SearchList">
<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Data - Search</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-2'>
                        @(Html.Kendo().DatePickerFor(Model => Model.DatePublishBegin)
                                     .Format("dd/MM/yyyy")
                                     .HtmlAttributes(new { @class = "form-control", title = "Begin" })
                                     .DateInput()
                                )
                    </div>
                    <div class='col-sm-2'>
                        @(Html.Kendo().DatePickerFor(Model => Model.DatePublishEnd)
                                     .Format("dd/MM/yyyy")
                                     .HtmlAttributes(new { @class = "form-control", title = "End" })
                                     .DateInput()
                                )
                    </div>
                    <div class='col-sm-2'>
                        <input id="Search" name="Search" class="form-control" placeholder="Search" type="text" value="" />
                    </div>
                    <div class="col-md-1">
                        <input type="checkbox" id="IsUpload" checked="checked">
                        <label for='IsUpload' style="font-size:12px;">Up/Pub</label>
                    </div>
                    <div class="col-md-1">
                        <input type="checkbox" id="IsTitle" value="" checked="checked">
                        <label for='IsTitle' style="font-size:12px;">Head</label>
                    </div>
                    <div class="col-md-1">
                        <input type="checkbox" id="IsDescription" value="" checked="checked">
                        <label for='IsDescription' style="font-size:12px;">Sum</label>
                    </div>
                    <div class='col-sm-1'>
                        <button type="button" class="btn btn-success" onclick="onSearch()">
                            <span class="fa fa-search"></span>
                        </button>
                    </div>
                    <div class='col-sm-1'>
                        <button type="button" class="btn btn-success" title="Excel English" onclick="onExcel()">
                            <span class="fas fa-file-excel"></span>
                        </button>
                    </div>
                </div>
                <br />
                @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.ProductCompact>()
.Name("Product")
.Columns(columns =>
{
    columns.Command(command => { command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "font-size: 11px; padding-left:16px; padding-top:6px; border-radius: 6px; font-weight:bold; width:50px;" });}).Width(80);
    columns.Template(@"<a target='_blank' href='#=URLCode#' title='#=URLCode#' class='btn btn-success' style='color:white; cursor: pointer; font-size: 11px; height:30px; text-align: center;'><i class='fas fa-external-link-alt'></i></a>").Title("").Width(50);
    columns.Select().Width(50);
    columns.Bound(t => t.IsError).Title("Error").Width(50);
    columns.Bound(t => t.DatePublish).Title("Publish (MM/dd/yyyy)").Width(100).HtmlAttributes(new { @class = "text-right" }).HeaderHtmlAttributes(new { @class = "text-center" });
    columns.Bound(t => t.Title).Title("Headline (Vie)").Width(300).HtmlAttributes(new { @style = "white-space: nowrap;" });
    columns.Bound(t => t.TitleEnglish).Title("Headline (Eng)").Width(200).HtmlAttributes(new { @style = "white-space: nowrap;" });
    columns.Bound(t => t.ID).Title("ID").Width(50);
})
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid", @style = "font-size:11px;" })
.Search(search => { search.Field(f => f.Title); search.Field(f => f.URLCode); search.Field(f => f.TitleEnglish); })
.Events(ev => ev.Change("onGridChange"))
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(10000)
.Model(model =>
{
    model.Id(t => t.SearchAndID);
    model.Field(t => t.ID).Editable(false);
})
.Events(t => { t.RequestEnd("onGridRequestEnd"); })
.Read(t => t.Action("AsyncGetProductCompactByDatePublishBeginAndDatePublishEndAndSearchAndIsTitleAndIsDescriptionAndSourceAndIsUploadToList", "Product").Data("filterProduct"))
.Update(t => t.Action("UpdateProductCompact", "Product"))
)
)
            </div>
        </div>
    </div>
</div>



@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)
<script>
    function onGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#Product").data("kendoGrid").dataSource.read();
        }
    }
    function filterProduct(e) {
        var searchValue = $("#Search").val();
        var datePublishBeginValue = toDate02($("#DatePublishBegin").val());
        var datePublishEndValue = toDate02($("#DatePublishEnd").val());
        var isTitleValue = document.getElementById("IsTitle").checked;
        var isDescriptionValue = document.getElementById("IsDescription").checked;
        var isUploadValue = document.getElementById("IsUpload").checked;
        return { search: searchValue, datePublishBegin: datePublishBeginValue, datePublishEnd: datePublishEndValue, isTitle: isTitleValue, isDescription: isDescriptionValue, isUpload: isUploadValue };
    }
    function onSearch() {
        onSearchList();
        $("#Product").data("kendoGrid").dataSource.read();
    }
    function onExcel() {
        onSearchList();
        BeginRequestHandler();
        var IDListValue = $("#SearchList").val();
        $.post("/Report/AsyncExportExcelReportDailyByIDList", { IDList: IDListValue }, function (result) {
            window.location.replace(result);
            EndRequestHandler();
            $("#ID").val("");
            $("#SearchList").val("");
        });
    }
    function onGridChange(arg) {
        $("#ID").val(this.selectedKeyNames().join(";"));
    }
    function onSearchList() {
        var IDListValue = $("#ID").val();
        var SearchList = $("#SearchList").val();
        SearchList = SearchList + ';' + IDListValue;
        $("#SearchList").val(SearchList);
    }
</script>
