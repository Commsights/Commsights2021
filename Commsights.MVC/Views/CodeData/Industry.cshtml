@{ ViewData["Title"] = "Industry count"; }

@model Commsights.MVC.Models.CodeDataViewModel

@Html.HiddenFor(Model => Model.IndustryID)
<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Code - Industry count</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-2'>
                        @(Html.Kendo().DatePickerFor(Model => Model.DatePublishBegin)
                                     .Format("dd/MM/yyyy")
                                     .HtmlAttributes(new { @class = "form-control text-right", title = "Date begin" })
                                     .DateInput()
                                )
                    </div>
                    <div class='col-sm-2'>
                        @(Html.Kendo().DatePickerFor(Model => Model.DatePublishEnd)
                                     .Format("dd/MM/yyyy")
                                     .HtmlAttributes(new { @class = "form-control text-right", title = "Date end" })
                                     .DateInput()
                                )
                    </div>                    
                    <div class='col-sm-1'>
                        <button type="button" class="btn btn-success" title="Search" onclick="onSearch()">
                            <span class="fas fa-search"></span>
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class='col-sm-6'>
                        @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.CodeDataReport>()
                            .Name("CodeDataReport")
                             .Columns(columns =>
                             {
                                 columns.Select().Width(50);
                                 columns.Bound(t => t.IndustryID).Title("ID").Width(50);
                                 columns.Bound(t => t.Industry).Title("Industry").Width(150);
                                 columns.Bound(t => t.ProductPropertyCount).Title("Copy").Width(50).HtmlAttributes(new { @class = "text-right", @style = "font-weight: bold;" });
                                 columns.Bound(t => t.ProductCount).Title("Source").Width(50).HtmlAttributes(new { @class = "text-right", @style = "font-weight: bold;" });
                                 columns.Bound(t => t.CodingCount).Title("Code").Width(50).HtmlAttributes(new { @class = "text-right text-success" });
                                 columns.Bound(t => t.ProductGoogleCount).Title("Search").Width(50).HtmlAttributes(new { @class = "text-right" });
                                 columns.Bound(t => t.ProductNewspageCount).Title("Scan").Width(50).HtmlAttributes(new { @class = "text-right" });
                                 columns.Bound(t => t.ProductTVCount).Title("TV").Width(50).HtmlAttributes(new { @class = "text-right" });
                             })
                            .ToolBar(toolBar => toolBar.Search())
                            .Editable(editable => editable.Mode(GridEditMode.InLine))
                            .Sortable()
                            .Scrollable()
                            .Reorderable(r => r.Columns(true))
                            .Resizable(r => r.Columns(true))
                            .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(10))
                            .Excel(excel => excel
                            .FileName("Config.xlsx")
                            .Filterable(true)
                            .ProxyURL(Url.Action("ExportExcel", "Config"))
                            )
                            .Pdf(pdf => pdf
                            .AllPages()
                            .AvoidLinks()
                            .PaperSize("A4")
                            .Margin("2cm", "1cm", "1cm", "1cm")
                            .Landscape()
                            .RepeatHeaders()
                            .FileName("Config.pdf")
                            )
                            .HtmlAttributes(new { @class = "KendoGrid", @style = "font-size:11px;" })
                            .Search(search => { search.Field(f => f.Industry);})
                            .Events(ev => ev.Change("onGridChange"))
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(1000)
                            .Model(model =>
                            {
                                model.Id(t => t.IndustryID);
                            })
                            .Read(t => t.Action("GetReportByDatePublishBeginAndDatePublishEndToList", "CodeData").Data("filterCodeData"))
                            )
                            )
                    </div>
                    <div class='col-sm-6'>
                        @(Html.Kendo().Grid<Commsights.Data.DataTransferObject.CodeDataReport>()
                            .Name("CodeDataReportIndustry")
                            .Columns(columns =>
                            {
                                columns.Bound(t => t.EmployeeID).Title("ID").Width(50);
                                columns.Bound(t => t.Employee).Title("Employee").Width(150);
                                columns.Bound(t => t.ProductCodingNot).Title("Sum").Width(50).HtmlAttributes(new { @class = "text-right text-danger", @style = "font-weight: bold;" });
                                columns.Bound(t => t.ProductEmployeeCount).Title("Source").Width(50).HtmlAttributes(new { @class = "text-right", @style = "font-weight: bold;" });                                
                                columns.Bound(t => t.ProductEmployeeCodingCount).Title("Code").Width(50).HtmlAttributes(new { @class = "text-right text-success", @style = "font-weight: bold;" });
                                columns.Bound(t => t.ProductPropertyEmployeeCodingCount).Title("Copy").Width(50).HtmlAttributes(new { @class = "text-right", @style = "font-weight: bold;" });
                                columns.Bound(t => t.ProductEmployeeCodingNotCount).Title("No code").Width(50).HtmlAttributes(new { @class = "text-right text-danger", @style = "font-weight: bold;" });
                            })
                            .ToolBar(toolBar => toolBar.Search())
                            .Editable(editable => editable.Mode(GridEditMode.InLine))
                            .Sortable()
                            .Scrollable()
                            .Reorderable(r => r.Columns(true))
                            .Resizable(r => r.Columns(true))
                            .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(10))
                            .Excel(excel => excel
                            .FileName("Config.xlsx")
                            .Filterable(true)
                            .ProxyURL(Url.Action("ExportExcel", "Config"))
                            )
                            .Pdf(pdf => pdf
                            .AllPages()
                            .AvoidLinks()
                            .PaperSize("A4")
                            .Margin("2cm", "1cm", "1cm", "1cm")
                            .Landscape()
                            .RepeatHeaders()
                            .FileName("Config.pdf")
                            )
                            .HtmlAttributes(new { @class = "KendoGrid", @style = "font-size:11px;" })
                            .Search(search => { search.Field(f => f.Employee);})
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(1000)
                            .Model(model =>
                            {
                            })
                            .Read(t => t.Action("GetReportByDatePublishBeginAndDatePublishEndAndIndustryIDToList", "CodeData").Data("filterCodeDataReportIndustry"))
                            )
                            )
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)

<script>
    function onSearch() {
        $("#CodeDataReport").data("kendoGrid").dataSource.read();
    }
    function filterCodeData(e) {
        var datePublishBeginValue = toDate02($("#DatePublishBegin").val());
        var datePublishEndValue = toDate02($("#DatePublishEnd").val());        
        return { datePublishBegin: datePublishBeginValue, datePublishEnd: datePublishEndValue };
    }
    function filterCodeDataReportIndustry(e) {
        var datePublishBeginValue = toDate02($("#DatePublishBegin").val());
        var datePublishEndValue = toDate02($("#DatePublishEnd").val());        
        var industryIDValue = $("#IndustryID").val();
        return { datePublishBegin: datePublishBeginValue, datePublishEnd: datePublishEndValue, industryID: industryIDValue };
    }
    function onGridChange(arg) {
        $("#IndustryID").val(this.selectedKeyNames().join(";"));
        $("#CodeDataReportIndustry").data("kendoGrid").dataSource.read();
    }
</script>
